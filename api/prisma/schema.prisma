// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Experiment {
  id          String   @id @default(cuid())
  name        String
  description String?
  prompt      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Temperature: Controls randomness/creativity (0.0-2.0)
  // Low (0.1-0.3): More deterministic, focused responses
  // High (0.7-1.0): More creative, diverse responses
  temperatureMin  Float
  temperatureMax  Float
  temperatureStep Float

  // Top-P: Controls diversity via nucleus sampling (0.0-1.0)
  // Low (0.1-0.3): More focused, conservative responses
  // High (0.7-0.9): More diverse, exploratory responses
  topPMin  Float
  topPMax  Float
  topPStep Float

  // Top-K: Limits vocabulary diversity (1-100)
  // Low (10-20): More focused vocabulary
  // High (40-100): More diverse vocabulary
  topKMin  Int
  topKMax  Int
  topKStep Int

  // Max Tokens: Controls response length (1-4000+)
  // Low (50-200): Short, concise responses
  // High (1000-4000): Long, detailed responses
  maxTokensMin  Int
  maxTokensMax  Int
  maxTokensStep Int

  // LLM configuration
  model String

  // Relationships
  responses Response[]

  @@map("experiments")
}

model Response {
  id           String   @id @default(cuid())
  experimentId String
  createdAt    DateTime @default(now())

  // LLM parameters used for this response
  temperature Float // Randomness/creativity control
  topP        Float // Diversity via nucleus sampling
  topK        Int // Vocabulary diversity limit
  maxTokens   Int // Maximum response length

  // The actual response content
  content String

  // Quality metrics (calculated programmatically)
  metrics ResponseMetrics?

  // Relationships
  experiment Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)

  @@map("responses")
}

model ResponseMetrics {
  id         String @id @default(cuid())
  responseId String @unique

  // Custom quality metrics (0-1 scale)
  coherenceScore    Float // Logical flow and consistency
  completenessScore Float // How well response addresses the prompt
  lengthScore       Float // Appropriate response length
  structureScore    Float // Paragraph structure and organization
  vocabularyScore   Float // Vocabulary diversity and sophistication

  // Overall composite score (weighted average of all metrics)
  overallScore Float

  // Additional metadata for analysis
  wordCount           Int
  sentenceCount       Int
  paragraphCount      Int
  avgWordsPerSentence Float
  uniqueWords         Int
  vocabularyDiversity Float // unique words / total words

  createdAt DateTime @default(now())

  // Relationships
  response Response @relation(fields: [responseId], references: [id], onDelete: Cascade)

  @@map("response_metrics")
}
